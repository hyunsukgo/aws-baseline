{% from 'defaults.template.yaml' import SubnetIdentifiers, AvailabilityZones %}

# Based on the Cloudonaut VPC Template

AWSTemplateFormatVersion: '2010-09-09'
Description: 'VPC with public and private subnets in {{ AvailabilityZones }} Availability Zone'

{% if AccountCIDR %}
Mappings:
  {% for Account, RegionMap in AccountCIDR.items() %}
  {{Account}}:
    {% for Region, CIDR in RegionMap.items() %}
    {{Region}}:
      CIDR: {{CIDR}}
    {% endfor %}
  {% endfor %}
{% endif %}

Parameters:
  MainAccount:
    Type: String
  AccountCIDR:
    Type: String
    {% if AccountCIDR %}
    Default: 'true'
    {% else %}
    Default: 'false'
    {% endif %}
    AllowedValues: ['true', 'false']
  ClassA:
    Description: 'Class A of VPC (XXX.0.0.0/16)'
    Type: Number
    Default: 10
    ConstraintDescription: 'Must be in the range [0-255]'
    MinValue: 0
    MaxValue: 255
  ClassB:
    Description: 'Class B of VPC (10.XXX.0.0/16)'
    Type: Number
    Default: 0
    ConstraintDescription: 'Must be in the range [0-255]'
    MinValue: 0
    MaxValue: 255
  ClassC:
    Description: 'Class C of VPC (10.0.XXX.0/16)'
    Type: Number
    Default: 0
    ConstraintDescription: 'Must be in the range [0-255]'
    MinValue: 0
    MaxValue: 255
  ClassD:
    Description: 'Class D of VPC (10.0.0.XXX/16)'
    Type: Number
    Default: 0
    ConstraintDescription: 'Must be in the range [0-255]'
    MinValue: 0
    MaxValue: 255
  CIDRSuffix:
    Description: 'Class D of VPC (10.0.0.0/XXX)'
    Type: Number
    Default: 16
    ConstraintDescription: 'Must be in the range [0-255]'
    MinValue: 0
    MaxValue: 255
  CIDRSubnetBits:
    Description: 'The number of subnet bits for the CIDR. Specifying a value "8" for this parameter will create a CIDR with a mask of "/24". Calculated by subtracting the number from 32. See Fn::Cidr function for more details'
    Type: Number
    Default: 12
  PrivateNatGateway:
    Description: 'Setting for creating Private Nat Gateways'
    Type: String
    Default: none
    AllowedValues: ["none", "single", "all"]
  ExportsPrefix:
    Type: String
    Default: 'vpc'
  FlowLogsLogGroupRetentionInDays:
    Description: 'The number of days log events are kept in CloudWatch Logs'
    Type: Number
    Default: 1
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
  FlowLogsBucketPrefix:
    Type: String
    Default: 'audit-storage-flowlogs'

Conditions:
  SingleNatGateway: !Equals ['single', !Ref PrivateNatGateway]
  AllNatGateways: !Equals ['all', !Ref PrivateNatGateway]

Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      {% if AccountCIDR %}
      CidrBlock: !FindInMap [!Ref 'AWS::AccountId', !Ref 'AWS::Region', 'CIDR']
      {% else %}
      CidrBlock: !Sub '${ClassA}.${ClassB}.${ClassC}.${ClassD}/${CIDRSuffix}'
      {% endif %}
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Sub '${ClassA}.${ClassB}.${ClassC}.${ClassD}/${CIDRSuffix}'

  FlowLogsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: !Ref FlowLogsLogGroupRetentionInDays
      LogGroupName: !Sub /vpc/flowlogs/${VPC}

  FlowLogsLogGroupRole:
    Type: 'AWS::IAM::Role'
    Properties:
      PermissionsBoundary: !Sub arn:aws:iam::${AWS::AccountId}:policy/CreatedIdentitiesPermissionsBoundary
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: CloudTrailAssumeRole
          Effect: Allow
          Principal:
            Service: 'vpc-flow-logs.amazonaws.com'
          Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: 'flowlogs-logs-policy'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: AWSCloudTrailCreateLogStream
            Effect: Allow
            Action: 'logs:CreateLogStream'
            Resource: !GetAtt FlowLogsLogGroup.Arn
          - Sid: AWSCloudTrailPutLogEvent
            Effect: Allow
            Action: logs:PutLogEvents
            Resource: !Sub ${FlowLogsLogGroup.Arn}*

  VPCFlowLogCloudWatchLogs:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !GetAtt FlowLogsLogGroupRole.Arn
      LogGroupName: !Ref FlowLogsLogGroup
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: ALL


  VPCFlowLogS3:
    Type: AWS::EC2::FlowLog
    Properties:
      LogDestinationType: s3
      LogDestination: !Sub arn:aws:s3:::${FlowLogsBucketPrefix}-${MainAccount}
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: ALL

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: Name
        Value: !Sub '${ClassA}.${ClassB}.${ClassC}.${ClassD}/${CIDRSuffix}'

  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  {% for Identifier in SubnetIdentifiers %}
  Subnet{{ Identifier }}Private:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [{{loop.index - 1}}, !GetAZs '']
      CidrBlock: !Select [ {{(loop.index-1)*2}}, !Cidr [ !GetAtt VPC.CidrBlock, {{AvailabilityZones * 2}}, !Ref CIDRSubnetBits ]]
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub ${VPC}-{{ Identifier }}-Private
      - Key: Reach
        Value: Private

  Subnet{{ Identifier }}Public:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [{{loop.index - 1}}, !GetAZs '']
      CidrBlock: !Select [ {{1+((loop.index-1)*2)}}, !Cidr [ !GetAtt VPC.CidrBlock, {{AvailabilityZones * 2}}, !Ref CIDRSubnetBits ]]
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub ${VPC}-{{ Identifier }}-Public
      - Key: Reach
        Value: Public

  RouteTable{{ Identifier }}Public:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${VPC.CidrBlock}-Public{{ Identifier }}
  RouteTable{{ Identifier }}Private:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${VPC.CidrBlock}-Private{{ Identifier }}

  RouteTableAssociation{{ Identifier }}Public:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet{{ Identifier }}Public
      RouteTableId: !Ref RouteTable{{ Identifier }}Public

  RouteTableAssociation{{ Identifier }}Private:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet{{ Identifier }}Private
      RouteTableId: !Ref RouteTable{{ Identifier }}Private

  RouteTableInternetRoute{{ Identifier }}Public:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTable{{ Identifier }}Public
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  SubnetNetworkAclAssociation{{ Identifier }}Public:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref Subnet{{ Identifier }}Public
      NetworkAclId: !Ref NetworkAclPublic

  SubnetNetworkAclAssociation{{ Identifier }}Private:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref Subnet{{ Identifier }}Private
      NetworkAclId: !Ref NetworkAclPrivate

  NatGateway{{ Identifier }}ElasticIp:
    Condition: AllNatGateways
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  NatGateway{{ Identifier }}:
    Condition: AllNatGateways
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 'NatGateway{{ Identifier }}ElasticIp.AllocationId'
      SubnetId: !Ref Subnet{{ Identifier }}Public

  NatGateway{{ Identifier }}Route:
    Condition: AllNatGateways
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTable{{ Identifier }}Private
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGateway{{ Identifier }}

  SingleNatGateway{{ Identifier }}Route:
    Condition: SingleNatGateway
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTable{{ Identifier }}Private
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref SingleNatGateway
  {% endfor %}

  SingleNatGatewayElasticIp:
    Condition: SingleNatGateway
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  SingleNatGateway:
    Condition: SingleNatGateway
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 'SingleNatGatewayElasticIp.AllocationId'
      SubnetId: !Ref Subnet{{ SubnetIdentifiers[0] }}Public

  NetworkAclPublic:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public

  NetworkAclPrivate:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private

  NetworkAclEntryInPublicAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'

  NetworkAclEntryOutPublicAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'

  NetworkAclEntryInPrivateAllowVPC:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'

  NetworkAclEntryOutPrivateAllowVPC:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'

Outputs:
  StackName:
    Description: 'Stack name'
    Value: !Sub '${AWS::StackName}'

  AZs:
    Description: 'AZs'
    Value: {{ AvailabilityZones }}
    Export:
      Name: !Sub '${ExportsPrefix}:AZs'

  AvailabilityZones:
    Description: 'AZs'
    Value: !Join [',', !GetAZs '']

  ClassB:
    Description: 'Class B.'
    Value: !Ref ClassB
    Export:
      Name: !Sub '${ExportsPrefix}:ClassB'

  VPC:
    Description: 'VPC.'
    Value: !Ref VPC
    Export:
      Name: !Sub '${ExportsPrefix}:VPC'

  SubnetsPublic:
    Description: 'Subnets public.'
    Value:
      Fn::Join:
        - ','
        - {% for Identifier in SubnetIdentifiers%}
          - !Ref Subnet{{ Identifier }}Public
        {% endfor %}
    Export:
      Name: !Sub '${ExportsPrefix}:SubnetsPublic'

  SubnetsPrivate:
    Description: 'Subnets private.'
    Value:
      Fn::Join:
        - ','
        - {% for Identifier in SubnetIdentifiers%}
          - !Ref Subnet{{ Identifier }}Private
        {% endfor %}
    Export:
      Name: !Sub '${ExportsPrefix}:SubnetsPrivate'

  RouteTablesPrivate:
    Description: 'Route tables private.'
    Value:
      Fn::Join:
        - ','
        - {% for Identifier in SubnetIdentifiers%}
          - !Ref RouteTable{{ Identifier }}Private
        {% endfor %}
    Export:
      Name: !Sub '${ExportsPrefix}:RouteTablesPrivate'

  RouteTablesPublic:
    Description: 'Route tables public.'
    Value:
      Fn::Join:
        - ','
        - {% for Identifier in SubnetIdentifiers%}
          - !Ref RouteTable{{ Identifier }}Public
          {% endfor %}
    Export:
      Name: !Sub '${ExportsPrefix}:RouteTablesPublic'

  {% for Identifier in SubnetIdentifiers%}
  AZ{{ Identifier }}:
    Description: 'AZ of {{ Identifier }}'
    Value: !Select [{{loop.index - 1}}, !GetAZs '']
    Export:
      Name: !Sub '${ExportsPrefix}:AZ{{ Identifier }}'
  Subnet{{ Identifier }}Public:
    Description: 'Subnet {{ Identifier }} public.'
    Value: !Ref Subnet{{ Identifier }}Public
    Export:
      Name: !Sub '${ExportsPrefix}:Subnet{{ Identifier }}Public'
  RouteTable{{ Identifier }}Public:
    Description: 'Route table A public.'
    Value: !Ref RouteTable{{ Identifier }}Public
    Export:
      Name: !Sub '${ExportsPrefix}:RouteTable{{ Identifier }}Public'
  Subnet{{ Identifier }}Private:
    Description: 'Subnet {{ Identifier }} private.'
    Value: !Ref Subnet{{ Identifier }}Private
    Export:
      Name: !Sub '${ExportsPrefix}:Subnet{{ Identifier }}Private'
  RouteTable{{ Identifier }}Private:
    Description: 'Route table {{ Identifier }} private.'
    Value: !Ref RouteTable{{ Identifier }}Private
    Export:
      Name: !Sub '${ExportsPrefix}:RouteTable{{ Identifier }}Private'
  {% endfor %}
